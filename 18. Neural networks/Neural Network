{"cells":[{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1717600026903,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"Maamo5Hcd0PU"},"outputs":[],"source":["# 1. Data Exploration and Preprocessing"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":746,"status":"ok","timestamp":1717600028391,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"tXUIii0rd-E6","outputId":"0d016e54-ded6-4e3d-c929-3afc914652b4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Dataset Information:\n","\u003cclass 'pandas.core.frame.DataFrame'\u003e\n","RangeIndex: 20000 entries, 0 to 19999\n","Data columns (total 17 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   letter  20000 non-null  object\n"," 1   xbox    20000 non-null  int64 \n"," 2   ybox    20000 non-null  int64 \n"," 3   width   20000 non-null  int64 \n"," 4   height  20000 non-null  int64 \n"," 5   onpix   20000 non-null  int64 \n"," 6   xbar    20000 non-null  int64 \n"," 7   ybar    20000 non-null  int64 \n"," 8   x2bar   20000 non-null  int64 \n"," 9   y2bar   20000 non-null  int64 \n"," 10  xybar   20000 non-null  int64 \n"," 11  x2ybar  20000 non-null  int64 \n"," 12  xy2bar  20000 non-null  int64 \n"," 13  xedge   20000 non-null  int64 \n"," 14  xedgey  20000 non-null  int64 \n"," 15  yedge   20000 non-null  int64 \n"," 16  yedgex  20000 non-null  int64 \n","dtypes: int64(16), object(1)\n","memory usage: 2.6+ MB\n","None\n","\n","First 5 rows:\n","| letter   | xbox   | ybox   | width   | height   | onpix   | xbar   | ybar   | x2bar   | y2bar   | xybar   | x2ybar   | xy2bar   | xedge   | xedgey   | yedge   | yedgex   |\n","|:---------|:-------|:-------|:--------|:---------|:--------|:-------|:-------|:--------|:--------|:--------|:---------|:---------|:--------|:---------|:--------|:---------|\n","| T        | 2      | 8      | 3       | 5        | 1       | 8      | 13     | 0       | 6       | 6       | 10       | 8        | 0       | 8        | 0       | 8        |\n","| I        | 5      | 12     | 3       | 7        | 2       | 10     | 5      | 5       | 4       | 13      | 3        | 9        | 2       | 8        | 4       | 10       |\n","| D        | 4      | 11     | 6       | 8        | 6       | 10     | 6      | 2       | 6       | 10      | 3        | 7        | 3       | 7        | 3       | 9        |\n","| N        | 7      | 11     | 6       | 6        | 3       | 5      | 9      | 4       | 6       | 4       | 4        | 10       | 6       | 10       | 2       | 8        |\n","| G        | 2      | 1      | 3       | 1        | 1       | 8      | 6      | 6       | 6       | 6       | 5        | 9        | 1       | 7        | 5       | 10       |\n","\n","Summary Statistics:\n","|       | xbox    | ybox    | width   | height   | onpix   | xbar    | ybar    | x2bar   | y2bar   | xybar   | x2ybar   | xy2bar   | xedge   | xedgey   | yedge   | yedgex   |\n","|:------|:--------|:--------|:--------|:---------|:--------|:--------|:--------|:--------|:--------|:--------|:---------|:---------|:--------|:---------|:--------|:---------|\n","| count | 20000   | 20000   | 20000   | 20000    | 20000   | 20000   | 20000   | 20000   | 20000   | 20000   | 20000    | 20000    | 20000   | 20000    | 20000   | 20000    |\n","| mean  | 4.02355 | 7.0355  | 5.12185 | 5.37245  | 3.50585 | 6.8976  | 7.50045 | 4.6286  | 5.17865 | 8.28205 | 6.454    | 7.929    | 3.0461  | 8.33885  | 3.69175 | 7.8012   |\n","| std   | 1.91321 | 3.30456 | 2.01457 | 2.26139  | 2.19046 | 2.02604 | 2.32535 | 2.69997 | 2.38082 | 2.48847 | 2.63107  | 2.08062  | 2.33254 | 1.54672  | 2.56707 | 1.61747  |\n","| min   | 0       | 0       | 0       | 0        | 0       | 0       | 0       | 0       | 0       | 0       | 0        | 0        | 0       | 0        | 0       | 0        |\n","| 25%   | 3       | 5       | 4       | 4        | 2       | 6       | 6       | 3       | 4       | 7       | 5        | 7        | 1       | 8        | 2       | 7        |\n","| 50%   | 4       | 7       | 5       | 6        | 3       | 7       | 7       | 4       | 5       | 8       | 6        | 8        | 3       | 8        | 3       | 8        |\n","| 75%   | 5       | 9       | 6       | 7        | 5       | 8       | 9       | 6       | 7       | 10      | 8        | 9        | 4       | 9        | 5       | 9        |\n","| max   | 15      | 15      | 15      | 15       | 15      | 15      | 15      | 15      | 15      | 15      | 15       | 15       | 15      | 15       | 15      | 15       |\n","\n","Missing Values:\n","letter    0\n","xbox      0\n","ybox      0\n","width     0\n","height    0\n","onpix     0\n","xbar      0\n","ybar      0\n","x2bar     0\n","y2bar     0\n","xybar     0\n","x2ybar    0\n","xy2bar    0\n","xedge     0\n","xedgey    0\n","yedge     0\n","yedgex    0\n","dtype: int64\n"]}],"source":["import pandas as pd\n","\n","df = pd.read_csv('Alphabets_data.csv')\n","\n","print(\"Dataset Information:\")\n","print(df.info())\n","\n","print(\"\\nFirst 5 rows:\")\n","print(df.head().to_markdown(index=False, numalign='left', stralign='left'))\n","\n","print(\"\\nSummary Statistics:\")\n","print(df.describe().to_markdown(numalign='left', stralign='left'))\n","\n","print(\"\\nMissing Values:\")\n","print(df.isnull().sum())\n"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":917,"status":"ok","timestamp":1717600029306,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"sHR-J7hweFV4"},"outputs":[],"source":["from sklearn.preprocessing import MinMaxScaler\n","\n","scaler = MinMaxScaler()\n","df_scaled = df.copy()\n","\n","numerical_features = ['xbox', 'ybox', 'width', 'height', 'onpix', 'xbar', 'ybar', 'x2bar', 'y2bar', 'xybar', 'x2ybar', 'xy2bar', 'xedge', 'xedgey', 'yedge', 'yedgex']\n","df_scaled[numerical_features] = scaler.fit_transform(df_scaled[numerical_features])\n"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1717600029306,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"LN8nDkwheJ1Y"},"outputs":[],"source":["# 2. Model Implementation"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7830,"status":"ok","timestamp":1717600037134,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"dlnzHIGieX0e","outputId":"85140178-dbef-4835-ee94-5ae6abc3457b"},"outputs":[{"name":"stdout","output_type":"stream","text":["125/125 [==============================] - 0s 1ms/step\n","Test Accuracy: 0.73\n"]}],"source":["from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from sklearn.metrics import accuracy_score\n","\n","X = df.drop(\"letter\", axis=1)\n","y = df[\"letter\"]\n","\n","le = LabelEncoder()\n","y = le.fit_transform(y)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","model = Sequential()\n","model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))\n","model.add(Dense(len(le.classes_), activation='softmax'))\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=0)\n","\n","y_pred = model.predict(X_test)\n","y_pred = [le.classes_[pred.argmax()] for pred in y_pred]\n","\n","accuracy = accuracy_score(le.inverse_transform(y_test), y_pred)\n","print(f'Test Accuracy: {accuracy:.2f}')\n"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1717600037134,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"lniqWKkweh7j"},"outputs":[],"source":["# 3. Hyperparameter Tuning"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":776},"executionInfo":{"elapsed":17151,"status":"ok","timestamp":1717600054282,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"uPNeg1Tveb_5","outputId":"e74f4206-68a1-467a-eea9-a38011d1cfc9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting scikeras\n","  Downloading scikeras-0.13.0-py3-none-any.whl (26 kB)\n","Collecting keras\u003e=3.2.0 (from scikeras)\n","  Downloading keras-3.3.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m13.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting scikit-learn\u003e=1.4.2 (from scikeras)\n","  Downloading scikit_learn-1.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.3/13.3 MB\u001b[0m \u001b[31m37.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from keras\u003e=3.2.0-\u003escikeras) (1.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras\u003e=3.2.0-\u003escikeras) (1.25.2)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras\u003e=3.2.0-\u003escikeras) (13.7.1)\n","Collecting namex (from keras\u003e=3.2.0-\u003escikeras)\n","  Downloading namex-0.0.8-py3-none-any.whl (5.8 kB)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (from keras\u003e=3.2.0-\u003escikeras) (3.9.0)\n","Collecting optree (from keras\u003e=3.2.0-\u003escikeras)\n","  Downloading optree-0.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (311 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.2/311.2 kB\u001b[0m \u001b[31m29.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: ml-dtypes in /usr/local/lib/python3.10/dist-packages (from keras\u003e=3.2.0-\u003escikeras) (0.2.0)\n","Requirement already satisfied: scipy\u003e=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn\u003e=1.4.2-\u003escikeras) (1.11.4)\n","Requirement already satisfied: joblib\u003e=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn\u003e=1.4.2-\u003escikeras) (1.4.2)\n","Requirement already satisfied: threadpoolctl\u003e=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn\u003e=1.4.2-\u003escikeras) (3.5.0)\n","Requirement already satisfied: typing-extensions\u003e=4.0.0 in /usr/local/lib/python3.10/dist-packages (from optree-\u003ekeras\u003e=3.2.0-\u003escikeras) (4.12.0)\n","Requirement already satisfied: markdown-it-py\u003e=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich-\u003ekeras\u003e=3.2.0-\u003escikeras) (3.0.0)\n","Requirement already satisfied: pygments\u003c3.0.0,\u003e=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich-\u003ekeras\u003e=3.2.0-\u003escikeras) (2.16.1)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py\u003e=2.2.0-\u003erich-\u003ekeras\u003e=3.2.0-\u003escikeras) (0.1.2)\n","Installing collected packages: namex, optree, scikit-learn, keras, scikeras\n","  Attempting uninstall: scikit-learn\n","    Found existing installation: scikit-learn 1.2.2\n","    Uninstalling scikit-learn-1.2.2:\n","      Successfully uninstalled scikit-learn-1.2.2\n","  Attempting uninstall: keras\n","    Found existing installation: keras 2.15.0\n","    Uninstalling keras-2.15.0:\n","      Successfully uninstalled keras-2.15.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow 2.15.0 requires keras\u003c2.16,\u003e=2.15.0, but you have keras 3.3.3 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed keras-3.3.3 namex-0.0.8 optree-0.11.0 scikeras-0.13.0 scikit-learn-1.5.0\n"]},{"data":{"application/vnd.colab-display-data+json":{"id":"841ae887c224477285477e9a4c2b92da","pip_warning":{"packages":["keras"]}}},"metadata":{},"output_type":"display_data"}],"source":["!pip install scikeras"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16948,"status":"ok","timestamp":1717600071221,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"Z7QMfBE0ehLk","outputId":"bf5f0bd8-0d3e-4ef4-ed96-4b46feb272cb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","500/500 [==============================] - 2s 2ms/step - loss: 1.9700 - accuracy: 0.4944\n","Epoch 2/10\n","500/500 [==============================] - 1s 3ms/step - loss: 1.0132 - accuracy: 0.7353\n","Epoch 3/10\n","500/500 [==============================] - 1s 2ms/step - loss: 0.7881 - accuracy: 0.7849\n","Epoch 4/10\n","500/500 [==============================] - 1s 2ms/step - loss: 0.6743 - accuracy: 0.8117\n","Epoch 5/10\n","500/500 [==============================] - 1s 2ms/step - loss: 0.5999 - accuracy: 0.8316\n","Epoch 6/10\n","500/500 [==============================] - 1s 2ms/step - loss: 0.5463 - accuracy: 0.8460\n","Epoch 7/10\n","500/500 [==============================] - 1s 2ms/step - loss: 0.5020 - accuracy: 0.8580\n","Epoch 8/10\n","500/500 [==============================] - 1s 3ms/step - loss: 0.4659 - accuracy: 0.8684\n","Epoch 9/10\n","500/500 [==============================] - 4s 7ms/step - loss: 0.4352 - accuracy: 0.8766\n","Epoch 10/10\n","500/500 [==============================] - 3s 6ms/step - loss: 0.4094 - accuracy: 0.8829\n","125/125 [==============================] - 0s 3ms/step\n","Test Accuracy: 0.88\n"]}],"source":["import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.metrics import accuracy_score\n","\n","X = df.drop('letter', axis=1)\n","y = df['letter']\n","\n","# Encode the labels (letters) into numerical form\n","le = LabelEncoder()\n","y = le.fit_transform(y)\n","\n","# Standardize the features (important for neural networks)\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","# 2. Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# 3. Build the simplified neural network model\n","def create_model(neurons=64, activation='relu', learning_rate=0.001):\n","    model = tf.keras.Sequential([\n","        tf.keras.layers.Dense(neurons, activation=activation, input_shape=(X_train.shape[1],)),\n","        tf.keras.layers.Dense(len(le.classes_), activation='softmax')\n","    ])\n","    model.compile(loss='sparse_categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate), metrics=['accuracy'])\n","    return model\n","\n","model = create_model()\n","\n","# 4. Train the model\n","model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)  # Verbose=1 shows training progress\n","\n","# 5. Evaluate the model on the test set\n","y_pred_prob = model.predict(X_test)\n","y_pred = [le.classes_[pred.argmax()] for pred in y_pred_prob]  # Convert back to letter labels\n","accuracy = accuracy_score(le.inverse_transform(y_test), y_pred)\n","\n","print(f'Test Accuracy: {accuracy:.2f}')"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1717600071221,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"HJ6gQpLCjNES"},"outputs":[],"source":["# Evaluation"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1717600071221,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"},"user_tz":-330},"id":"8z9rE6-oe66z"},"outputs":[],"source":["def create_model(optimizer='adam'):\n","    model = Sequential()\n","    model.add(Dense(12, input_dim=8, activation='relu'))\n","    model.add(Dense(8, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))\n","    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n","    return model\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"TmMwH1cS_56J"},"outputs":[{"name":"stdout","output_type":"stream","text":["Dataset Information:\n","\u003cclass 'pandas.core.frame.DataFrame'\u003e\n","RangeIndex: 20000 entries, 0 to 19999\n","Data columns (total 17 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   letter  20000 non-null  object\n"," 1   xbox    20000 non-null  int64 \n"," 2   ybox    20000 non-null  int64 \n"," 3   width   20000 non-null  int64 \n"," 4   height  20000 non-null  int64 \n"," 5   onpix   20000 non-null  int64 \n"," 6   xbar    20000 non-null  int64 \n"," 7   ybar    20000 non-null  int64 \n"," 8   x2bar   20000 non-null  int64 \n"," 9   y2bar   20000 non-null  int64 \n"," 10  xybar   20000 non-null  int64 \n"," 11  x2ybar  20000 non-null  int64 \n"," 12  xy2bar  20000 non-null  int64 \n"," 13  xedge   20000 non-null  int64 \n"," 14  xedgey  20000 non-null  int64 \n"," 15  yedge   20000 non-null  int64 \n"," 16  yedgex  20000 non-null  int64 \n","dtypes: int64(16), object(1)\n","memory usage: 2.6+ MB\n","None\n","\n","First 5 rows:\n","| letter   | xbox   | ybox   | width   | height   | onpix   | xbar   | ybar   | x2bar   | y2bar   | xybar   | x2ybar   | xy2bar   | xedge   | xedgey   | yedge   | yedgex   |\n","|:---------|:-------|:-------|:--------|:---------|:--------|:-------|:-------|:--------|:--------|:--------|:---------|:---------|:--------|:---------|:--------|:---------|\n","| T        | 2      | 8      | 3       | 5        | 1       | 8      | 13     | 0       | 6       | 6       | 10       | 8        | 0       | 8        | 0       | 8        |\n","| I        | 5      | 12     | 3       | 7        | 2       | 10     | 5      | 5       | 4       | 13      | 3        | 9        | 2       | 8        | 4       | 10       |\n","| D        | 4      | 11     | 6       | 8        | 6       | 10     | 6      | 2       | 6       | 10      | 3        | 7        | 3       | 7        | 3       | 9        |\n","| N        | 7      | 11     | 6       | 6        | 3       | 5      | 9      | 4       | 6       | 4       | 4        | 10       | 6       | 10       | 2       | 8        |\n","| G        | 2      | 1      | 3       | 1        | 1       | 8      | 6      | 6       | 6       | 6       | 5        | 9        | 1       | 7        | 5       | 10       |\n","\n","Summary Statistics:\n","|       | xbox    | ybox    | width   | height   | onpix   | xbar    | ybar    | x2bar   | y2bar   | xybar   | x2ybar   | xy2bar   | xedge   | xedgey   | yedge   | yedgex   |\n","|:------|:--------|:--------|:--------|:---------|:--------|:--------|:--------|:--------|:--------|:--------|:---------|:---------|:--------|:---------|:--------|:---------|\n","| count | 20000   | 20000   | 20000   | 20000    | 20000   | 20000   | 20000   | 20000   | 20000   | 20000   | 20000    | 20000    | 20000   | 20000    | 20000   | 20000    |\n","| mean  | 4.02355 | 7.0355  | 5.12185 | 5.37245  | 3.50585 | 6.8976  | 7.50045 | 4.6286  | 5.17865 | 8.28205 | 6.454    | 7.929    | 3.0461  | 8.33885  | 3.69175 | 7.8012   |\n","| std   | 1.91321 | 3.30456 | 2.01457 | 2.26139  | 2.19046 | 2.02604 | 2.32535 | 2.69997 | 2.38082 | 2.48847 | 2.63107  | 2.08062  | 2.33254 | 1.54672  | 2.56707 | 1.61747  |\n","| min   | 0       | 0       | 0       | 0        | 0       | 0       | 0       | 0       | 0       | 0       | 0        | 0        | 0       | 0        | 0       | 0        |\n","| 25%   | 3       | 5       | 4       | 4        | 2       | 6       | 6       | 3       | 4       | 7       | 5        | 7        | 1       | 8        | 2       | 7        |\n","| 50%   | 4       | 7       | 5       | 6        | 3       | 7       | 7       | 4       | 5       | 8       | 6        | 8        | 3       | 8        | 3       | 8        |\n","| 75%   | 5       | 9       | 6       | 7        | 5       | 8       | 9       | 6       | 7       | 10      | 8        | 9        | 4       | 9        | 5       | 9        |\n","| max   | 15      | 15      | 15      | 15       | 15      | 15      | 15      | 15      | 15      | 15      | 15       | 15       | 15      | 15       | 15      | 15       |\n","\n","Missing Values:\n","letter    0\n","xbox      0\n","ybox      0\n","width     0\n","height    0\n","onpix     0\n","xbar      0\n","ybar      0\n","x2bar     0\n","y2bar     0\n","xybar     0\n","x2ybar    0\n","xy2bar    0\n","xedge     0\n","xedgey    0\n","yedge     0\n","yedgex    0\n","dtype: int64\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n","  pid = os.fork()\n"]},{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-2-c5f91ac272ce\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 57\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;31m# Initialize GridSearchCV with the reduced parameter grid and fewer CV folds\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 57\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m \u001b[0mbest_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-\u003e 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **params)\u001b[0m\n\u001b[1;32m    966\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 968\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    969\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    970\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1541\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1542\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1543\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1544\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1545\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    912\u001b[0m                     )\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 914\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    915\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    916\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m         )\n\u001b[0;32m---\u003e 67\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   2005\u001b[0m         \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2006\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2007\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2008\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2009\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1648\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1650\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mGeneratorExit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1760\u001b[0m                 (self._jobs[0].get_status(\n\u001b[1;32m   1761\u001b[0m                     timeout=self.timeout) == TASK_PENDING)):\n\u001b[0;32m-\u003e 1762\u001b[0;31m                 \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1763\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import numpy as np\n","import pandas as pd\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from sklearn.model_selection import GridSearchCV, train_test_split\n","from scikeras.wrappers import KerasClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","df = pd.read_csv('Alphabets_data.csv')\n","\n","print(\"Dataset Information:\")\n","print(df.info())\n","\n","print(\"\\nFirst 5 rows:\")\n","print(df.head().to_markdown(index=False, numalign='left', stralign='left'))\n","\n","print(\"\\nSummary Statistics:\")\n","print(df.describe().to_markdown(numalign='left', stralign='left'))\n","\n","print(\"\\nMissing Values:\")\n","print(df.isnull().sum())\n","\n","# Separate features and labels\n","X = df.drop(columns=['letter'])\n","y = df['letter']\n","\n","# Encode labels\n","le = LabelEncoder()\n","y_encoded = le.fit_transform(y)\n","\n","# Split the dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n","\n","# Example create_model function\n","def create_model(optimizer='adam'):\n","    model = Sequential()\n","    model.add(Dense(12, input_dim=16, activation='relu'))  # Assuming input_dim should be 16\n","    model.add(Dense(8, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))\n","    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n","    return model\n","\n","# Reduce the parameter grid for faster search\n","param_grid = {\n","    'optimizer': ['adam', 'rmsprop'],\n","    'epochs': [10, 20],  # Reduced number of epochs\n","    'batch_size': [10, 20]\n","}\n","\n","# Create the KerasClassifier\n","model = KerasClassifier(model=create_model, verbose=0)\n","\n","# Initialize GridSearchCV with the reduced parameter grid and fewer CV folds\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=2)\n","grid_result = grid.fit(X_train, y_train)\n","best_model = grid_result.best_estimator_.model\n","\n","# Evaluate model function\n","def evaluate_model(model, X_test, y_test, label_encoder):\n","    y_pred_prob = model.predict(X_test)\n","    y_pred = [label_encoder.classes_[int(pred \u003e 0.5)] for pred in y_pred_prob]\n","    y_test_labels = label_encoder.inverse_transform(y_test)\n","\n","    print(\"\\nClassification Report:\")\n","    print(classification_report(y_test_labels, y_pred))\n","\n","    print(\"\\nConfusion Matrix:\")\n","    print(confusion_matrix(y_test_labels, y_pred))\n","\n","# Assuming default_model is defined and trained\n","print(\"\\nDefault Model Evaluation:\")\n","evaluate_model(model, X_test, y_test, le)\n","\n","print(\"\\nTuned Model Evaluation:\")\n","evaluate_model(best_model, X_test, y_test, le)\n"]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}