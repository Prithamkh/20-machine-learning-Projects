{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# 1. EDA & Data Preprocessing:"],"metadata":{"id":"YwvVwjlUSya6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv(\"anime.csv\")\n","\n","df.fillna(\"\", inplace=True)\n","\n","print(df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7rp4y0uwQexQ","executionInfo":{"status":"ok","timestamp":1717343239797,"user_tz":-330,"elapsed":3,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"be44dc7b-40d8-4aa7-d08a-e6a629c98891"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["| anime_id   | name                             | genre                                                        | type   | episodes   | rating   | members   |\n","|:-----------|:---------------------------------|:-------------------------------------------------------------|:-------|:-----------|:---------|:----------|\n","| 32281      | Kimi no Na wa.                   | Drama, Romance, School, Supernatural                         | Movie  | 1          | 9.37     | 200630    |\n","| 5114       | Fullmetal Alchemist: Brotherhood | Action, Adventure, Drama, Fantasy, Magic, Military, Shounen  | TV     | 64         | 9.26     | 793665    |\n","| 28977      | Gintama°                         | Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | TV     | 51         | 9.25     | 114262    |\n","| 9253       | Steins;Gate                      | Sci-Fi, Thriller                                             | TV     | 24         | 9.17     | 673572    |\n","| 9969       | Gintama&#039;                    | Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | TV     | 51         | 9.16     | 151266    |\n"]}]},{"cell_type":"code","source":["# 2. Feature Extraction:"],"metadata":{"id":"eSPGIywMS2b-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Extract and process genres\n","all_genres = set()\n","for genres in df['genre']:\n","    all_genres.update(genres.split(\", \"))\n","\n","genre_columns = pd.DataFrame({genre: [int(genre in anime_genres) for anime_genres in df['genre']] for genre in all_genres})\n","\n","features = pd.concat([genre_columns, df['rating']], axis=1)\n"],"metadata":{"id":"Z8e0mHIvQ4A7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 3. Recommendation System"],"metadata":{"id":"7qp2Uz-AEwkc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","df.fillna(\"\", inplace=True)\n","\n","all_genres = set()\n","for genres in df['genre']:\n","    all_genres.update(genres.split(\", \"))\n","\n","genre_columns = pd.DataFrame({genre: [int(genre in anime_genres) for anime_genres in df['genre']] for genre in all_genres})\n","\n","df['rating'] = pd.to_numeric(df['rating'], errors='coerce').fillna(0)\n","\n","features = pd.concat([genre_columns, df['rating']], axis=1)\n","\n","similarity_matrix = cosine_similarity(features)\n"],"metadata":{"id":"9cKtEiH9Q_ZR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.metrics.pairwise import cosine_similarity\n","from sklearn.preprocessing import OneHotEncoder, MultiLabelBinarizer\n","\n","# Genre one-hot encoding\n","mlb = MultiLabelBinarizer()\n","genre_encoded = mlb.fit_transform(df['genre'].str.split(', '))\n","genre_df = pd.DataFrame(genre_encoded, columns=mlb.classes_)\n","\n","# Type one-hot encoding\n","type_encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n","type_encoded = type_encoder.fit_transform(df['type'].values.reshape(-1, 1))\n","type_df = pd.DataFrame(type_encoded, columns=type_encoder.get_feature_names_out())\n","\n","df['rating'] = pd.to_numeric(df['rating'], errors='coerce')\n","\n","mean_rating = df['rating'].mean()\n","df['rating'].fillna(mean_rating, inplace=True)\n","\n","features = pd.concat([genre_df, type_df, df['rating']], axis=1)\n","\n","similarity_matrix = cosine_similarity(features)\n","\n","def get_recommendations(anime_name, num_recommendations=5):\n","    if anime_name not in df['name'].values:\n","        return []\n","\n","    anime_index = df[df['name'] == anime_name].index[0]\n","    similar_indices = similarity_matrix[anime_index].argsort()[:-num_recommendations-1:-1]\n","\n","    recommendations = []\n","    for i in similar_indices:\n","        if i != anime_index:\n","            recommendations.append((df['name'][i], df['rating'][i]))\n","    return recommendations\n","\n","recommendations = get_recommendations(\"Kimi no Na wa.\")\n","print(\"Recommendations for Kimi no Na wa.:\")\n","for anime, rating in recommendations:\n","    print(f\"- {anime} (Rating: {rating:.2f})\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ut35k0ndRKW3","executionInfo":{"status":"ok","timestamp":1717343245107,"user_tz":-330,"elapsed":1780,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"6a77b2c8-0e32-4628-86e5-9ef9e9a9a2a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Recommendations for Kimi no Na wa.:\n","- Kokoro ga Sakebitagatterunda. (Rating: 8.32)\n","- Harmonie (Rating: 7.52)\n","- Air Movie (Rating: 7.39)\n","- Aura: Maryuuin Kouga Saigo no Tatakai (Rating: 7.67)\n"]}]},{"cell_type":"code","source":["def get_recommendations(anime_name, num_recommendations=5, similarity_threshold=0.5):\n","    if anime_name not in df['name'].values:\n","        return []\n","\n","    anime_index = df[df['name'] == anime_name].index[0]\n","\n","    similarity_scores = similarity_matrix[anime_index]\n","\n","    similar_indices = [i for i, score in enumerate(similarity_scores) if i != anime_index and score >= similarity_threshold]\n","\n","    similar_indices.sort(key=lambda x: similarity_scores[x], reverse=True)\n","\n","    recommendations = [(df['name'][i], df['rating'][i], similarity_scores[i]) for i in similar_indices[:num_recommendations]]\n","\n","    return recommendations\n","\n","\n","recommendations = get_recommendations(\"Kimi no Na wa.\", similarity_threshold=0.7)\n","print(\"Recommendations for Kimi no Na wa. (with similarity >= 0.7):\")\n","for anime, rating, similarity in recommendations:\n","    print(f\"- {anime} (Rating: {rating:.2f}, Similarity: {similarity:.2f})\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iiUCHG7-Scvh","executionInfo":{"status":"ok","timestamp":1717343245107,"user_tz":-330,"elapsed":7,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"17e5ba95-79e6-4e9a-cf35-894a748ebd75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Recommendations for Kimi no Na wa. (with similarity >= 0.7):\n","- Kokoro ga Sakebitagatterunda. (Rating: 8.32, Similarity: 0.99)\n","- Harmonie (Rating: 7.52, Similarity: 0.99)\n","- Air Movie (Rating: 7.39, Similarity: 0.99)\n","- Aura: Maryuuin Kouga Saigo no Tatakai (Rating: 7.67, Similarity: 0.99)\n","- Momo e no Tegami (Rating: 7.78, Similarity: 0.99)\n"]}]},{"cell_type":"code","source":["# Task - 1"],"metadata":{"id":"wZiLIiNhle47"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('anime.csv')\n","\n","print(\"\\nChecking for missing values:\")\n","print(df.isnull().sum())\n","\n","df['rating'].fillna(df['rating'].mean(), inplace=True)\n","\n","print(\"\\nFirst 5 rows:\")\n","print(df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n","\n","print(\"\\nDataset information:\")\n","print(df.info())\n","\n","print(\"\\nSummary statistics of numerical columns:\")\n","print(df.describe().to_markdown(numalign=\"left\", stralign=\"left\"))\n","\n","print(\"\\nValue counts for categorical columns:\")\n","for column in ['type', 'genre']:\n","    print(f\"\\n--- {column} ---\")\n","    print(df[column].value_counts().head().to_markdown(numalign=\"left\", stralign=\"left\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NFjzXjWjl5Wn","executionInfo":{"status":"ok","timestamp":1717343245107,"user_tz":-330,"elapsed":5,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"4a4491df-6a97-40a5-8f3a-342043d77ea7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Checking for missing values:\n","anime_id      0\n","name          0\n","genre        62\n","type         25\n","episodes      0\n","rating      230\n","members       0\n","dtype: int64\n","\n","First 5 rows:\n","| anime_id   | name                             | genre                                                        | type   | episodes   | rating   | members   |\n","|:-----------|:---------------------------------|:-------------------------------------------------------------|:-------|:-----------|:---------|:----------|\n","| 32281      | Kimi no Na wa.                   | Drama, Romance, School, Supernatural                         | Movie  | 1          | 9.37     | 200630    |\n","| 5114       | Fullmetal Alchemist: Brotherhood | Action, Adventure, Drama, Fantasy, Magic, Military, Shounen  | TV     | 64         | 9.26     | 793665    |\n","| 28977      | Gintama°                         | Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | TV     | 51         | 9.25     | 114262    |\n","| 9253       | Steins;Gate                      | Sci-Fi, Thriller                                             | TV     | 24         | 9.17     | 673572    |\n","| 9969       | Gintama&#039;                    | Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | TV     | 51         | 9.16     | 151266    |\n","\n","Dataset information:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 12294 entries, 0 to 12293\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   anime_id  12294 non-null  int64  \n"," 1   name      12294 non-null  object \n"," 2   genre     12232 non-null  object \n"," 3   type      12269 non-null  object \n"," 4   episodes  12294 non-null  object \n"," 5   rating    12294 non-null  float64\n"," 6   members   12294 non-null  int64  \n","dtypes: float64(1), int64(2), object(4)\n","memory usage: 672.5+ KB\n","None\n","\n","Summary statistics of numerical columns:\n","|       | anime_id   | rating   | members     |\n","|:------|:-----------|:---------|:------------|\n","| count | 12294      | 12294    | 12294       |\n","| mean  | 14058.2    | 6.4739   | 18071.3     |\n","| std   | 11455.3    | 1.0171   | 54820.7     |\n","| min   | 1          | 1.67     | 5           |\n","| 25%   | 3484.25    | 5.9      | 225         |\n","| 50%   | 10260.5    | 6.55     | 1550        |\n","| 75%   | 24794.5    | 7.17     | 9437        |\n","| max   | 34527      | 10       | 1.01392e+06 |\n","\n","Value counts for categorical columns:\n","\n","--- type ---\n","| type    | count   |\n","|:--------|:--------|\n","| TV      | 3787    |\n","| OVA     | 3311    |\n","| Movie   | 2348    |\n","| Special | 1676    |\n","| ONA     | 659     |\n","\n","--- genre ---\n","| genre                 | count   |\n","|:----------------------|:--------|\n","| Hentai                | 823     |\n","| Comedy                | 523     |\n","| Music                 | 301     |\n","| Kids                  | 199     |\n","| Comedy, Slice of Life | 179     |\n"]}]},{"cell_type":"code","source":["# Task - 2"],"metadata":{"id":"d4or0Rk2l8AL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Load and preprocess data\n","df = pd.read_csv('anime.csv')\n","df['rating'].fillna(df['rating'].mean(), inplace=True)\n","\n","# Feature Selection and Conversion\n","features = ['genre', 'rating']\n","\n","# Handle Missing Values in 'genre'\n","df['genre'].fillna('', inplace=True)  # Fill NaN values with empty strings\n","# Alternatively, you could fill with a specific genre like \"Unknown\"\n","\n","# Convert 'genre' into numerical representation\n","mlb = MultiLabelBinarizer()\n","genre_df = pd.DataFrame(mlb.fit_transform(df['genre'].str.split(', ')), columns=mlb.classes_, index=df.index)\n","df = pd.concat([df, genre_df], axis=1)\n","\n","# Normalize 'rating'\n","scaler = MinMaxScaler()\n","df['rating'] = scaler.fit_transform(df[['rating']])\n","\n","# Display processed data\n","print(\"\\nProcessed data (with selected features and conversions):\")\n","print(df[features + list(mlb.classes_)].head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aahpk0comB72","executionInfo":{"status":"ok","timestamp":1717343245107,"user_tz":-330,"elapsed":4,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"53b4902c-f9eb-4d62-fc12-f742ed6292bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Processed data (with selected features and conversions):\n","| genre                                                        | rating   |    | Action   | Adventure   | Cars   | Comedy   | Dementia   | Demons   | Drama   | Ecchi   | Fantasy   | Game   | Harem   | Hentai   | Historical   | Horror   | Josei   | Kids   | Magic   | Martial Arts   | Mecha   | Military   | Music   | Mystery   | Parody   | Police   | Psychological   | Romance   | Samurai   | School   | Sci-Fi   | Seinen   | Shoujo   | Shoujo Ai   | Shounen   | Shounen Ai   | Slice of Life   | Space   | Sports   | Super Power   | Supernatural   | Thriller   | Vampire   | Yaoi   | Yuri   |\n","|:-------------------------------------------------------------|:---------|:---|:---------|:------------|:-------|:---------|:-----------|:---------|:--------|:--------|:----------|:-------|:--------|:---------|:-------------|:---------|:--------|:-------|:--------|:---------------|:--------|:-----------|:--------|:----------|:---------|:---------|:----------------|:----------|:----------|:---------|:---------|:---------|:---------|:------------|:----------|:-------------|:----------------|:--------|:---------|:--------------|:---------------|:-----------|:----------|:-------|:-------|\n","| Drama, Romance, School, Supernatural                         | 0.92437  | 0  | 0        | 0           | 0      | 0        | 0          | 0        | 1       | 0       | 0         | 0      | 0       | 0        | 0            | 0        | 0       | 0      | 0       | 0              | 0       | 0          | 0       | 0         | 0        | 0        | 0               | 1         | 0         | 1        | 0        | 0        | 0        | 0           | 0         | 0            | 0               | 0       | 0        | 0             | 1              | 0          | 0         | 0      | 0      |\n","| Action, Adventure, Drama, Fantasy, Magic, Military, Shounen  | 0.911164 | 0  | 1        | 1           | 0      | 0        | 0          | 0        | 1       | 0       | 1         | 0      | 0       | 0        | 0            | 0        | 0       | 0      | 1       | 0              | 0       | 1          | 0       | 0         | 0        | 0        | 0               | 0         | 0         | 0        | 0        | 0        | 0        | 0           | 1         | 0            | 0               | 0       | 0        | 0             | 0              | 0          | 0         | 0      | 0      |\n","| Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | 0.909964 | 0  | 1        | 0           | 0      | 1        | 0          | 0        | 0       | 0       | 0         | 0      | 0       | 0        | 1            | 0        | 0       | 0      | 0       | 0              | 0       | 0          | 0       | 0         | 1        | 0        | 0               | 0         | 1         | 0        | 1        | 0        | 0        | 0           | 1         | 0            | 0               | 0       | 0        | 0             | 0              | 0          | 0         | 0      | 0      |\n","| Sci-Fi, Thriller                                             | 0.90036  | 0  | 0        | 0           | 0      | 0        | 0          | 0        | 0       | 0       | 0         | 0      | 0       | 0        | 0            | 0        | 0       | 0      | 0       | 0              | 0       | 0          | 0       | 0         | 0        | 0        | 0               | 0         | 0         | 0        | 1        | 0        | 0        | 0           | 0         | 0            | 0               | 0       | 0        | 0             | 0              | 1          | 0         | 0      | 0      |\n","| Action, Comedy, Historical, Parody, Samurai, Sci-Fi, Shounen | 0.89916  | 0  | 1        | 0           | 0      | 1        | 0          | 0        | 0       | 0       | 0         | 0      | 0       | 0        | 1            | 0        | 0       | 0      | 0       | 0              | 0       | 0          | 0       | 0         | 1        | 0        | 0               | 0         | 1         | 0        | 1        | 0        | 0        | 0           | 1         | 0            | 0               | 0       | 0        | 0             | 0              | 0          | 0         | 0      | 0      |\n"]}]},{"cell_type":"code","source":["# Task - 3"],"metadata":{"id":"8L07aW3cmed-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import MultiLabelBinarizer, MinMaxScaler\n","from sklearn.metrics.pairwise import cosine_similarity\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","tfidf = TfidfVectorizer(stop_words='english')\n","genre_matrix = tfidf.fit_transform(df['genre'].astype(str))\n","feature_matrix = pd.concat([pd.DataFrame(genre_matrix.toarray()), df['rating']], axis=1)\n","\n","cosine_sim = cosine_similarity(feature_matrix, feature_matrix)\n","\n","# Recommendation function\n","def get_recommendations(anime_name, cosine_sim=cosine_sim, num_recommendations=10, similarity_threshold=0.7):\n","    idx = df[df['name'] == anime_name].index[0]\n","    sim_scores = list(enumerate(cosine_sim[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","    filtered_scores = [i for i in sim_scores if i[1] > similarity_threshold]\n","    top_indices = [i[0] for i in filtered_scores[1:num_recommendations+1]]  # Exclude the anime itself\n","    return df['name'].iloc[top_indices]\n","\n","anime_to_recommend = \"Kimi no Na wa.\"\n","recommended_anime = get_recommendations(anime_to_recommend)\n","print(f\"\\nRecommendations for '{anime_to_recommend}':\\n{recommended_anime.to_markdown(numalign='left', stralign='left')}\")\n","\n","for threshold in [0.6, 0.7, 0.8]:\n","    recommended_anime = get_recommendations(anime_to_recommend, similarity_threshold=threshold)\n","    print(f\"\\nRecommendations with threshold {threshold}:\\n{recommended_anime.to_markdown(numalign='left', stralign='left')}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ptYXUuLdmssa","executionInfo":{"status":"ok","timestamp":1717343246414,"user_tz":-330,"elapsed":1309,"user":{"displayName":"Dhiraj Kr","userId":"06249591020802164904"}},"outputId":"ea8d389f-40bb-4bea-8525-dc68e124f13d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Recommendations for 'Kimi no Na wa.':\n","|      | name                                  |\n","|:-----|:--------------------------------------|\n","| 5805 | Wind: A Breath of Heart OVA           |\n","| 6394 | Wind: A Breath of Heart (TV)          |\n","| 1111 | Aura: Maryuuin Kouga Saigo no Tatakai |\n","| 878  | Shakugan no Shana II (Second)         |\n","| 1201 | Angel Beats!: Another Epilogue        |\n","| 986  | Shakugan no Shana                     |\n","| 1494 | Harmonie                              |\n","| 1604 | Shakugan no Shana S                   |\n","| 208  | Kokoro ga Sakebitagatterunda.         |\n","| 1959 | Air Movie                             |\n","\n","Recommendations with threshold 0.6:\n","|      | name                                  |\n","|:-----|:--------------------------------------|\n","| 5805 | Wind: A Breath of Heart OVA           |\n","| 6394 | Wind: A Breath of Heart (TV)          |\n","| 1111 | Aura: Maryuuin Kouga Saigo no Tatakai |\n","| 878  | Shakugan no Shana II (Second)         |\n","| 1201 | Angel Beats!: Another Epilogue        |\n","| 986  | Shakugan no Shana                     |\n","| 1494 | Harmonie                              |\n","| 1604 | Shakugan no Shana S                   |\n","| 208  | Kokoro ga Sakebitagatterunda.         |\n","| 1959 | Air Movie                             |\n","\n","Recommendations with threshold 0.7:\n","|      | name                                  |\n","|:-----|:--------------------------------------|\n","| 5805 | Wind: A Breath of Heart OVA           |\n","| 6394 | Wind: A Breath of Heart (TV)          |\n","| 1111 | Aura: Maryuuin Kouga Saigo no Tatakai |\n","| 878  | Shakugan no Shana II (Second)         |\n","| 1201 | Angel Beats!: Another Epilogue        |\n","| 986  | Shakugan no Shana                     |\n","| 1494 | Harmonie                              |\n","| 1604 | Shakugan no Shana S                   |\n","| 208  | Kokoro ga Sakebitagatterunda.         |\n","| 1959 | Air Movie                             |\n","\n","Recommendations with threshold 0.8:\n","|      | name                                  |\n","|:-----|:--------------------------------------|\n","| 5805 | Wind: A Breath of Heart OVA           |\n","| 6394 | Wind: A Breath of Heart (TV)          |\n","| 1111 | Aura: Maryuuin Kouga Saigo no Tatakai |\n","| 878  | Shakugan no Shana II (Second)         |\n","| 1201 | Angel Beats!: Another Epilogue        |\n","| 986  | Shakugan no Shana                     |\n","| 1494 | Harmonie                              |\n","| 1604 | Shakugan no Shana S                   |\n","| 208  | Kokoro ga Sakebitagatterunda.         |\n","| 1959 | Air Movie                             |\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"59C49TSdnK1y"},"execution_count":null,"outputs":[]}]}